# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: microsoft

      - name: Install yq
        uses: mikefarah/yq@v4.42.1

      - name: Get pubspec version
        id: get_flutter_app_version
        run: |
          VERSION=$(yq .version | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' pubspec.yaml | head -n 1)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format in pubspec.yaml. Expected format: x.y.z"
            exit 1
          fi
          echo "TAG_VERSION=$VERSION" >> $GITHUB_OUTPUT
  
      - name: Create git tag
        run: |
          git tag "v${{ steps.get_flutter_app_version.outputs.TAG_VERSION }}"

      - name: Install Flutter          
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v

      - name: Clean Flutter build
        run: flutter clean

      - name: Get Flutter dependencies    
        run: flutter pub get

      - name: Set up environment variables
        run: |
          # Create .env file for build
          cat << EOF > .env
          GMS_API_KEY=${{ secrets.GMS_API_KEY }}
          FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
          FIREBASE_IOS_CLIENT_ID=${{ secrets.FIREBASE_IOS_CLIENT_ID }}
          FIREBASE_IOS_BUNDLE_ID=${{ secrets.FIREBASE_IOS_BUNDLE_ID }}
          RECAPTCHA_SITE_KEY=${{ secrets.RECAPTCHA_SITE_KEY }}
          EOF

      - name: Build APK Release             
        run: flutter build apk --release
        continue-on-error: false

      - name: Build an AppBundle          
        run: flutter build appbundle --release
        continue-on-error: false

      - name: Verify artifacts exist
        run: |
          if [ ! -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "APK file not found!"
            exit 1
          fi
          if [ ! -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "AAB file not found!"
            exit 1
          fi

      - name: Report build sizes
        run: |
          echo "APK size: $(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)"
          echo "AAB size: $(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)"

      - name: Save APK to Artifacts
        uses: actions/upload-artifact@v4 
        with:
          name: flutter-apk
          path: build/app/outputs/flutter-apk/*.apk

      - name: Save APPBUNDLE to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-appbundle
          path: build/app/outputs/bundle/release/*.aab

      - name: Create Github Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/app/outputs/bundle/release/*.aab
            build/app/outputs/flutter-apk/*.apk
          tag_name: "v${{ steps.get_flutter_app_version.outputs.TAG_VERSION }}"
          token: ${{ secrets.PERSONAL_RELEASE_TOKEN }}
          draft: false
          prerelease: false
          generate_release_notes: true
