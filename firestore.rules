rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAppCheckValid() {
      return request.app_check.valid;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidUserData() {
      let requiredFields = ['displayName', 'email', 'userType', 'username', 'lastUpdated', 'status'];
      let validTypes = ['Researcher', 'Regular Member'];
      
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.displayName is string &&
             request.resource.data.email is string &&
             request.resource.data.username is string &&
             request.resource.data.userType in validTypes &&
             request.resource.data.status in ['active', 'inactive', 'suspended'];
    }
    
    function isValidResearcherProfile() {
      return request.resource.data.researcherProfile.keys().hasAll(['institution', 'researchAreas', 'missionStats']) &&
             request.resource.data.researcherProfile.institution is string &&
             request.resource.data.researcherProfile.researchAreas is list;
    }
    
    function isResearcher(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.userType == 'Researcher';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow create: if isAuthenticated() && isAppCheckValid() && isOwner(userId);
      allow update: if isAuthenticated() && isAppCheckValid() && (isOwner(userId) || isAdmin());
      allow delete: if isAuthenticated() && isAppCheckValid() && isAdmin();
      
      // User's private data subcollection
      match /private/{document=**} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // User's journeys subcollection
      match /journeys/{journeyId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isOwner(userId);
      }
      
      // User's missions subcollection (for researchers)
      match /missions/{missionId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isOwner(userId) && isResearcher(userId);
      }
    }

    // Journeys collection
    match /journeys/{journeyId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow create: if isAuthenticated() && isAppCheckValid();
      allow update: if isAuthenticated() && isAppCheckValid() && 
        (resource.data.creatorId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && isAppCheckValid() && 
        (resource.data.creatorId == request.auth.uid || isAdmin());
      
      // Stops subcollection
      match /stops/{stopId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/journeys/$(journeyId)).data.creatorId);
      }
      
      // Likes subcollection
      match /likes/{userId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Followers collection
    match /followers/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
      
      match /userFollowers/{followerId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isOwner(followerId);
      }
      
      match /userFollowing/{followingId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Pins collection
    match /pins/{pinId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow create: if isAuthenticated() && isAppCheckValid();
      allow update: if isAuthenticated() && isAppCheckValid() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && isAppCheckValid() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Shadowed journeys collection
    match /shadowed_journeys/{shadowId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow create: if isAuthenticated() && isAppCheckValid();
      allow update: if isAuthenticated() && isAppCheckValid() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && isAppCheckValid() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }
  }
} 